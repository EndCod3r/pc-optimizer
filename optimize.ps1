################################################################################################################
###                                                                                                          ###
### WARNING: This file is automatically generated DO NOT modify this file directly as it will be overwritten ###
###                                                                                                          ###
################################################################################################################

<#
.NOTES
    Author         : EndLordHD @EndCod3r
    GitHub         : https://github.com/EndCod3r
    Version        : Pre-release v0.1.2
#>

# Many of these tweaks are from ChrisTitusTech/winutil go check out his repo

param($AcceptAllTweaks, $AcceptRecommendedTweaks)

if ($AcceptAllTweaks) {
    $AcceptRecommendedTweaks = $true
}


# Checking for admin privileges
$currentPrincipal = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
if (-Not $currentPrincipal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator) ) {
    Write-Output "Please run this script as administrator."
    exit
}

# Create restore point
$userinput = Read-Host -Prompt 'Do you want to have a restore point created? (Recommended) (Y/n)'
$userinput = $userinput.ToLower()
if ( $userinput -eq 'y' -or !$userinput ) {
    Checkpoint-Computer -Description "Pre-Optimizations" -RestorePointType "MODIFY_SETTINGS"
    Write-Output "If anything happens that you don't want then you can go back to this restore point." 
}

# Checks if Ultimate Performance plan exists and if it doesn't it adds it
if ($AcceptRecommendedTweaks) {
    $userinput = 'y'
} else {$userinput = Read-Host -Prompt 'Do you want to add Ultimate Performance power plan? (Recommended) (Y/n)'}

if ( $userinput -eq 'y' -or !$userinput ) {
    $powerSchemeName = "Ultimate Performance"
    $powerSchemeGuid = "e9a42b02-d5df-448d-aa00-03f14749eb61"

    $schemes = powercfg /list | Out-String -Stream

    $ultimateScheme = $schemes | Where-Object { $_ -match $powerSchemeName }
    if ($null -eq $ultimateScheme) {
        Write-Host "Power scheme '$powerSchemeName' not found. Adding..."

        # Adds the power plan
        powercfg /duplicatescheme $powerSchemeGuid
        powercfg -attributes SUB_SLEEP 7bc4a2f9-d8fc-4469-b07b-33eb785aaca0 -ATTRIB_HIDE
        powercfg -setactive $powerSchemeGuid
        powercfg -change -monitor-timeout-ac 0
        
        Write-Output "Make sure that the Ultimate Performance power plan is active."
        
        $i = 3
        do {
            Write-Host "Opeing Power Options in $i seconds."
            Start-Sleep 1
            $i--
        } while ($i -gt 0)
        
        control.exe /name Microsoft.PowerOptions
        
    } else {
        Write-Host "Power scheme '$powerSchemeName' already exists."
    }
}

# Set some services to manual
if ($AcceptRecommendedTweaks) {
    $userinput = 'y'
} else {$userinput = Read-Host -Prompt 'Do you want to optimize services? (Recommended) (Y/n)'}
if ( $userinput -eq 'y' -or !$userinput ) {
    $Services = Get-Content .\Config\services.json | ConvertFrom-Json

    for ($i = 0; $i -lt $Services.service.name.Count; $i++) {
        Write-Progress -Activity "Optimizing services" -Status $Services.service.name[$i] 
        $Services.service.name[$i] | Set-Service -StartupType $Services.service.StartupType[$i] -ErrorAction SilentlyContinue
    }

    Write-Output "
    If you see any errors stating ""Service wasn't found"" or ""Access is denied,"" don't worry, nothing is wrong.
    "
}

# Delete C:\Windows\Temp and user's temporary files
if ($AcceptRecommendedTweaks) {
    $userinput = 'y'
} else {$userinput = Read-Host -Prompt 'Do you want to delete temporary files (Recommended) (Y/n)'}
if ( $userinput -eq 'y' -or !$userinput ) {
    Write-Output "Removing Windows Temporary Files (C:\Windows\Temp)"
    Start-Sleep 1
    Get-ChildItem -Path "C:\Windows\Temp" *.* -Recurse | Remove-Item -Force -Recurse -ErrorAction SilentlyContinue

    Write-Output "Removing User Temporary Files ($env:TEMP)"
    Start-Sleep 1
    Get-ChildItem -Path $env:TEMP *.* -Recurse | Remove-Item -Force -Recurse -ErrorAction SilentlyContinue
    
    Write-Output "
    If you see any errors stating ""Access is denied,"" don't worry, nothing is wrong.
    "
}

if ($AcceptRecommendedTweaks) {
    $userinput = 'y'
} else {$userinput = Read-Host -Prompt 'Do you want to run Disk Cleanup? (Recommended) (Y/n)'}
if ( $userinput -eq 'y' -or !$userinput ) {
    cleanmgr.exe /d C: /VERYLOWDISK
    Write-Output "Running DISM Image Cleanup"
    Dism.exe /Online /Cleanup-Image /StartComponentCleanup /ResetBase
}
